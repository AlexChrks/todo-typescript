{"version":3,"sources":["components/Navbar/Navbar.tsx","hooks/hooks.ts","api/apiQuery.tsx","store/actions/actions.tsx","store/constants.ts","components/TodoForm/TodoForm.tsx","components/TodoTask/TodoTask.tsx","components/TodosList/TodosList.tsx","App.tsx","store/reducers/reducers.tsx","index.tsx"],"names":["Navbar","className","href","useAppDispatch","useDispatch","useAppSelector","useSelector","a","axios","get","setInitialTodosQuery","dispatch","apiQuery","then","todos","transformedArr","data","map","todo","id","title","completed","type","payload","TodoForm","input","useRef","ref","placeholder","onKeyPress","event","key","newTodo","Date","now","addHandler","current","value","htmlFor","TodoTask","isCompleted","classes","checked","onChange","bind","onClick","removeHandler","TodosList","store","state","useEffect","push","join","App","initialState","createStore","action","aer","filter","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c62e7d88.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper px1\">\r\n        <a href=\"/\" className=\"brand-logo\">Todo Typescript</a>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store/store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import axios from 'axios';\r\n\r\nexport async function apiQuery() {\r\n  return await axios.get(\"https://jsonplaceholder.typicode.com/todos\");\r\n}","\r\nimport {SET_INITIAL_TODOS, ADD_TODO, DELETE_TODO, CHANGE_TODO_STATUS} from '../constants';\r\nimport {TsetInitialTodos, TaddTodo, TdeleteTodo, TchangeTodoStatus, ITodo} from '../../interfaces/interfaces'\r\n\r\nimport { apiQuery } from '../../api/apiQuery'\r\nimport { AxiosResponse } from 'axios';\r\nimport { Dispatch } from 'react';\r\n\r\n\r\nexport function setInitialTodos(data: Array<ITodo>): TsetInitialTodos {\r\n  return {\r\n    type: SET_INITIAL_TODOS,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport function addTodo(data: ITodo): TaddTodo {\r\n  return {\r\n    type: ADD_TODO,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport function deleteTodo(data: number): TdeleteTodo {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport function changeTodoStatus(data: number): TchangeTodoStatus {\r\n  return {\r\n    type: CHANGE_TODO_STATUS,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const setInitialTodosQuery = () => {\r\n  return (dispatch: Dispatch<TsetInitialTodos>) => {\r\n    apiQuery().then((todos: AxiosResponse) : void => {\r\n      const transformedArr: Array<ITodo> = todos.data.map((todo: ITodo): ITodo => {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.title,\r\n          completed: todo.completed\r\n        }\r\n      });\r\n      dispatch(setInitialTodos(transformedArr))\r\n    })\r\n  };\r\n}\r\n","export const SET_INITIAL_TODOS: string = 'SET_INITIAL_TODOS';\r\nexport const ADD_TODO: string = 'ADD_TODO';\r\nexport const DELETE_TODO: string = 'DELETE_TODO';\r\nexport const CHANGE_TODO_STATUS: string = 'CHANGE_TODO_STATUS';","import React, {useRef} from 'react';\r\nimport { Ref } from 'react';\r\nimport { useAppDispatch } from '../../hooks/hooks';\r\nimport { ITodo } from '../../interfaces/interfaces';\r\nimport { addTodo } from '../../store/actions/actions';\r\n\r\n\r\nconst TodoForm: React.FC = () => {\r\n\r\n  const dispatch = useAppDispatch();\r\n  \r\n  const input: Ref<any> = useRef(null);\r\n\r\n  const addHandler = (title: string) => {\r\n    const newTodo: ITodo = {\r\n      title: title,\r\n      id: Date.now(),\r\n      completed: false\r\n    }\r\n    dispatch(addTodo(newTodo));\r\n  }\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter' ) {\r\n      addHandler(input.current!.value);\r\n      input.current!.value = '';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"input-field mt2\">\r\n      <input \r\n      ref={ input }\r\n      type=\"text\" \r\n      id=\"title\" \r\n      placeholder=\"Type task here\"\r\n      onKeyPress={ keyPressHandler }/>\r\n      <label htmlFor=\"title\" className=\"active\">\r\n        Type task here\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoForm\r\n","import React from 'react'\r\nimport { useAppDispatch } from '../../hooks/hooks';\r\nimport { changeTodoStatus, deleteTodo } from '../../store/actions/actions';\r\n\r\ntype TodoTaskProps = {\r\n  title: string\r\n  id: number\r\n  isCompleted: boolean,\r\n  classes: string\r\n}\r\n\r\nconst TodoTask: React.FC<TodoTaskProps> = ({ title, id, isCompleted, classes }) => {\r\n  \r\n  const dispatch = useAppDispatch();\r\n\r\n  const toggleHandler = (id: number) => {\r\n    dispatch(changeTodoStatus(id))\r\n  }\r\n\r\n  const removeHandler = (id: number) => {\r\n    dispatch(deleteTodo(id));\r\n  }\r\n\r\n  return (\r\n    <li className={classes} key={id}>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={isCompleted}\r\n          onChange={toggleHandler.bind(null, id)}\r\n        />\r\n        <span>{title}</span>\r\n        <i\r\n          className=\"material-icons red-text\"\r\n          onClick={() => removeHandler(id)}\r\n        >\r\n          delete\r\n        </i>\r\n      </label>\r\n  </li>\r\n  )\r\n}\r\n\r\nexport default TodoTask\r\n","import React, {useEffect} from 'react'\r\nimport { setInitialTodosQuery } from '../../store/actions/actions'\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport { ITodo } from '../../interfaces/interfaces';\r\nimport TodoTask from '../TodoTask/TodoTask';\r\n\r\nconst TodosList: React.FC = () => {\r\n\r\n  const store: any = useAppSelector((state) => state)\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(setInitialTodosQuery());\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {\r\n        store && \r\n        <ul>\r\n          {store.map((todo: ITodo ) => {\r\n            const classes=['todo'];\r\n            if (todo.completed) {\r\n              classes.push('completed')\r\n            }\r\n            return (<TodoTask \r\n            key={todo.id}  \r\n            title={todo.title} \r\n            id={todo.id} \r\n            isCompleted={todo.completed}\r\n            classes={classes.join(' ')}\r\n            />)\r\n          }\r\n          )}\r\n        </ul>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TodosList\r\n","import React from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport TodoForm from './components/TodoForm/TodoForm';\nimport TodosList from './components/TodosList/TodosList';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Navbar/>\n      <div className=\"container\">\n        <TodoForm/>\n        <TodosList/>\n      </div>\n    </>  \n  );\n}\n\nexport default App;\n","const initialState: Array<any> = [];\r\n\r\ntype State = typeof initialState\r\n\r\nexport function todosReducer(state: State = initialState, action: any): State {\r\n  switch (action.type) {\r\n    case 'SET_INITIAL_TODOS':\r\n      return [\r\n        ...action.payload\r\n      ]\r\n    case 'ADD_TODO':\r\n      return [\r\n        action.payload, ...state\r\n      ]\r\n    case 'CHANGE_TODO_STATUS':\r\n      state.map((todo) : void => {\r\n        if (todo.id === action.payload) {\r\n          todo.completed = !todo.completed\r\n        }})\r\n          return [\r\n            ...state\r\n          ]    \r\n    case 'DELETE_TODO':\r\n          const aer = state.filter(todo => action.payload !== todo.id)\r\n          return [\r\n            ...aer\r\n          ]   \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const selectAvailableKeys = (state: any) => state.availableKeys;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport {todosReducer} from './store/reducers/reducers';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(todosReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}